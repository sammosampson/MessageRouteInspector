// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SystemDot.MessageRouteInspector.Server.GraphQl.Specifications.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class QueriesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Queries.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Queries", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Queries")))
            {
                SystemDot.MessageRouteInspector.Server.GraphQl.Specifications.Features.QueriesFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 2
#line 3
 testRunner.Given("I have initialised the graphql server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Getting routes with no routes created")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Queries")]
        public virtual void GettingRoutesWithNoRoutesCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting routes with no routes created", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line 2
this.FeatureBackground();
#line 6
 testRunner.When("I send the following query \'query RouteQuery { App { routes{ } } }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.Then("I should be returned", "{\"data\":{\"app\":{\"routes\":[]}}}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Getting routes with one route with a command processing but not processed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Queries")]
        public virtual void GettingRoutesWithOneRouteWithACommandProcessingButNotProcessed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting routes with one route with a command processing but not processed", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 2
this.FeatureBackground();
#line 13
 testRunner.Given("I have sent the following query \'mutation logCommandProcessing { logCommandProces" +
                    "sing(name: \"X\", machine: \"CSAMPSON1700\", thread: 1, createdOn: \"00000000000001\")" +
                    " }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
 testRunner.When("I send the following query \'query RouteQuery { App { routes{ createdOn, machine }" +
                    " } }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
 testRunner.Then("I should be returned", "{\"data\":{\"app\":{\"routes\":[{\"createdOn\":\"0001-01-01 00:00:00\",\"machine\":\"CSAMPSON1" +
                    "700\"}]}}}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Getting routes with one route with a command processing and processed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Queries")]
        public virtual void GettingRoutesWithOneRouteWithACommandProcessingAndProcessed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting routes with one route with a command processing and processed", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 2
this.FeatureBackground();
#line 21
 testRunner.Given("I have sent the following query \'mutation logCommandProcessing { logCommandProces" +
                    "sing(name: \"X\", machine: \"CSAMPSON1700\", thread: 1, createdOn: \"00000000000001\")" +
                    " }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.And("I have sent the following query \'mutation logMessageProcessed { logMessageProcess" +
                    "ed(machine: \"CSAMPSON1700\", thread: 1) }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.When("I send the following query \'query RouteQuery { App { routes{ createdOn, machine, " +
                    "root{name, type, closeBranchCount}, messages{name} } } }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
 testRunner.Then("I should be returned", "{\"data\":{\"app\":{\"routes\":[{\"createdOn\":\"0001-01-01 00:00:00\",\"machine\":\"CSAMPSON1" +
                    "700\",\"root\":{\"name\":\"X\",\"type\":0,\"closeBranchCount\":1},\"messages\":[{\"name\":\"X\"}]" +
                    "}]}}}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Getting routes with one route with an event processing and processed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Queries")]
        public virtual void GettingRoutesWithOneRouteWithAnEventProcessingAndProcessed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting routes with one route with an event processing and processed", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 2
this.FeatureBackground();
#line 30
 testRunner.Given("I have sent the following query \'mutation logEventProcessing { logEventProcessing" +
                    "(name: \"X\", machine: \"CSAMPSON1700\", thread: 1, createdOn: \"00000000000001\") }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.And("I have sent the following query \'mutation logMessageProcessed { logMessageProcess" +
                    "ed(machine: \"CSAMPSON1700\", thread: 1) }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.When("I send the following query \'query RouteQuery { App { routes{ createdOn, machine, " +
                    "root{name, type, closeBranchCount}, messages{name} } } }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.Then("I should be returned", "{\"data\":{\"app\":{\"routes\":[{\"createdOn\":\"0001-01-01 00:00:00\",\"machine\":\"CSAMPSON1" +
                    "700\",\"root\":{\"name\":\"X\",\"type\":1,\"closeBranchCount\":1},\"messages\":[{\"name\":\"X\"}]" +
                    "}]}}}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Getting routes with a failure")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Queries")]
        public virtual void GettingRoutesWithAFailure()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting routes with a failure", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 2
this.FeatureBackground();
#line 39
 testRunner.Given("I have sent the following query \'mutation logCommandProcessing { logCommandProces" +
                    "sing(name: \"X\", machine: \"CSAMPSON1700\", thread: 1, createdOn: \"00000000000001\")" +
                    " }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
 testRunner.And("I have sent the following query \'mutation logMessageProcessingFailure { logMessag" +
                    "eProcessingFailure(name: \"A failure\", machine: \"CSAMPSON1700\", thread: 1, create" +
                    "dOn: \"00000000000001\") }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.When("I send the following query \'query RouteQuery { App { routes{ createdOn, machine, " +
                    "root{name, type, closeBranchCount}, messages{name, type} } } }\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then("I should be returned", "{\"data\":{\"app\":{\"routes\":[{\"createdOn\":\"0001-01-01 00:00:00\",\"machine\":\"CSAMPSON1" +
                    "700\",\"root\":{\"name\":\"X\",\"type\":0,\"closeBranchCount\":0},\"messages\":[{\"name\":\"X\",\"" +
                    "type\":0},{\"name\":\"A failure\",\"type\":2}]}]}}}", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
